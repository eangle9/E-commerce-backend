definitions:
  request.CartRequest:
    properties:
      product_item_id:
        type: integer
      quantity:
        type: integer
    type: object
  request.ColorRequest:
    properties:
      color_name:
        type: string
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  request.Phone:
    properties:
      number:
        type: string
    type: object
  request.ProductCategoryRequest:
    properties:
      name:
        type: string
      parent_id:
        type: integer
    type: object
  request.ProductRequest:
    properties:
      brand:
        type: string
      category_id:
        type: integer
      description:
        type: string
      product_name:
        type: string
    type: object
  request.RefreshRequest:
    properties:
      refresh_token:
        type: string
    type: object
  request.ReviewRequest:
    properties:
      comment:
        type: string
      product_id:
        type: integer
      rating:
        type: integer
      user_id:
        type: integer
    type: object
  request.SignUpRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      phoneNumber:
        $ref: '#/definitions/request.Phone'
      username:
        type: string
    type: object
  request.SizeRequest:
    properties:
      discount:
        type: number
      price:
        type: number
      product_item_id:
        type: integer
      qty_in_stock:
        type: integer
      size_name:
        type: string
    type: object
  request.UpdateUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        $ref: '#/definitions/request.Phone'
      profile_picture:
        type: string
      username:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      message: {}
      statusCode:
        type: integer
    type: object
  utils.UpdateCategory:
    properties:
      name:
        type: string
      parent_id:
        type: integer
    type: object
  utils.UpdateColor:
    properties:
      color_name:
        type: string
    type: object
  utils.UpdateProduct:
    properties:
      brand:
        type: string
      category_id:
        type: integer
      description:
        type: string
      product_name:
        type: string
    type: object
  utils.UpdateSize:
    properties:
      discount:
        type: number
      price:
        type: number
      qty_in_stock:
        type: integer
      size_name:
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: engdaworkyismaw9@gmail.com
    name: Engdawork yismaw
  description: This is a sample server for an e-commerce platform.
  title: E-commerce API
  version: "1.0"
paths:
  /cart/add:
    post:
      consumes:
      - application/json
      description: Add product to shopping cart
      operationId: add-to-cart
      parameters:
      - description: Cart item data
        in: body
        name: cart_item
        required: true
        schema:
          $ref: '#/definitions/request.CartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: AddToCart
      tags:
      - cart
  /category/{id}:
    get:
      description: Get a single product category by id
      operationId: get-product-category-by-id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get category
      tags:
      - product category
  /category/create:
    post:
      consumes:
      - application/json
      description: Insert a new product category
      operationId: create-product-category
      parameters:
      - description: Product category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/request.ProductCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Create category
      tags:
      - product category
  /category/delete/{id}:
    delete:
      description: Delete product category by id
      operationId: delete-product-category-by-id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Delete category
      tags:
      - product category
  /category/list:
    get:
      description: Retrieves a list of product category
      operationId: list-product-category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: List category
      tags:
      - product category
  /category/update/{id}:
    put:
      consumes:
      - application/json
      description: Update product category by id
      operationId: update-product-category-by-id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update product category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/utils.UpdateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Update category
      tags:
      - product category
  /color/{id}:
    get:
      description: Get a single color by id
      operationId: get-color-by-id
      parameters:
      - description: Color ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Get color
      tags:
      - product color
  /color/create:
    post:
      consumes:
      - application/json
      description: Insert a new color
      operationId: create-color
      parameters:
      - description: Color data
        in: body
        name: color
        required: true
        schema:
          $ref: '#/definitions/request.ColorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Create color
      tags:
      - product color
  /color/delete/{id}:
    delete:
      description: Delete color by id
      operationId: delete-color-by-id
      parameters:
      - description: Color ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Delete color
      tags:
      - product color
  /color/list:
    get:
      description: Retrieves a list of colors
      operationId: list-color
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: List color
      tags:
      - product color
  /color/update/{id}:
    put:
      consumes:
      - application/json
      description: Update color by id
      operationId: update-color-by-id
      parameters:
      - description: Color ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update color data
        in: body
        name: color
        required: true
        schema:
          $ref: '#/definitions/utils.UpdateColor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Update color
      tags:
      - product color
  /image/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image for a product in cloudinary
      operationId: upload-product-image
      parameters:
      - description: Product Item ID
        in: formData
        name: product_item_id
        required: true
        type: integer
      - description: product image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Upload image
      tags:
      - product image
  /item/{id}:
    get:
      description: Get single product item by id
      operationId: product-item-by-id
      parameters:
      - description: Product item id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get product item
      tags:
      - product item
  /item/create:
    post:
      consumes:
      - multipart/form-data
      description: insert a new product item
      operationId: create-product-item
      parameters:
      - description: Product ID
        in: formData
        name: product_id
        required: true
        type: integer
      - description: Color ID
        in: formData
        name: color_id
        type: integer
      - description: Price
        in: formData
        name: price
        required: true
        type: number
      - description: Discount
        in: formData
        name: discount
        type: number
      - description: Quantity in stock
        in: formData
        name: qty_in_stock
        type: integer
      - description: Product Image File
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Create product item
      tags:
      - product item
  /item/delete/{id}:
    delete:
      description: Delete product item by id
      operationId: delete-product-item-by-id
      parameters:
      - description: Product item id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Delete product item
      tags:
      - product item
  /item/list:
    get:
      description: Retrieves a list of product items
      operationId: list-product-item
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: list product items
      tags:
      - product item
  /item/update/{id}:
    put:
      consumes:
      - application/json
      description: Edit product item by id
      operationId: update-product-item-by-id
      parameters:
      - description: Product item id
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID
        in: formData
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Update product item
      tags:
      - product item
  /product/{id}:
    get:
      description: Get single product by id
      operationId: get-product-by-id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get product
      tags:
      - product
  /product/create:
    post:
      consumes:
      - application/json
      description: Insert a new product
      operationId: create-product
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/request.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: create product
      tags:
      - product
  /product/delete/{id}:
    delete:
      description: Delete product by id
      operationId: delete-product-by-id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Delete product
      tags:
      - product
  /product/list:
    get:
      description: Retrieves a list of products
      operationId: list-products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: List products
      tags:
      - product
  /product/update/{id}:
    put:
      consumes:
      - application/json
      description: Update product by id
      operationId: update-product-by-id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/utils.UpdateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Update product
      tags:
      - product
  /products/{id}:
    get:
      description: Get a single product by id
      operationId: get-products-by-id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get single product
      tags:
      - products
  /products/list:
    get:
      description: Retrieves a list of products
      operationId: list_of_products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: List of products
      tags:
      - products
  /review/create:
    post:
      consumes:
      - application/json
      description: Insert a new review
      operationId: create-review
      parameters:
      - description: review data
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/request.ReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Create review
      tags:
      - product review
  /review/list:
    get:
      description: Retrieves a list of reviews
      operationId: list-review
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: List review
      tags:
      - product review
  /size/{id}:
    get:
      description: Get a single size by id
      operationId: get-size-by-id
      parameters:
      - description: Size ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get size
      tags:
      - size
  /size/create:
    post:
      consumes:
      - application/json
      description: Insert New product size
      operationId: create-size
      parameters:
      - description: Size data
        in: body
        name: size
        required: true
        schema:
          $ref: '#/definitions/request.SizeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Create size
      tags:
      - size
  /size/delete/{id}:
    delete:
      description: Delete product size by id
      operationId: delete-size-by-id
      parameters:
      - description: Size ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Delete size
      tags:
      - size
  /size/list:
    get:
      description: Retrieves a list of product sizes
      operationId: list-product-size
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: List product sizes
      tags:
      - size
  /size/update/{id}:
    put:
      consumes:
      - application/json
      description: Update product size by id
      operationId: update-size-by-id
      parameters:
      - description: Size ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update size data
        in: body
        name: size
        required: true
        schema:
          $ref: '#/definitions/utils.UpdateSize'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Update size
      tags:
      - size
  /user/{id}:
    get:
      description: Get a single user by id
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Get user
      tags:
      - user
  /user/delete/{id}:
    delete:
      description: delete user by id
      operationId: delete-user-by-id
      parameters:
      - description: UserID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Delete user
      tags:
      - user
  /user/list:
    get:
      description: Retrieves a list of users. Requires authentication with JWT token.
      operationId: list-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: List users
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: User login by email and password
      operationId: login-user
      parameters:
      - description: Login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Add a new user
      operationId: register-user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
      summary: Insert user
      tags:
      - user
  /user/token:
    post:
      consumes:
      - application/json
      description: refresh the expired access token
      operationId: refresh-access-token
      parameters:
      - description: Refresh token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/request.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Refresh token
      tags:
      - user
  /user/update/{id}:
    put:
      consumes:
      - application/json
      description: update user by id
      operationId: update-user-by-id
      parameters:
      - description: UserID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - JWT: []
      summary: Update user
      tags:
      - user
schemes:
- http
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
